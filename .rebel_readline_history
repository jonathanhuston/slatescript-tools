1601630858344:(def a #{1 2 3})
1601630858947:a
1601630862476:(list a)
1601630897768:(into '() a)
1601630915991:(into () a)
1601645005619:(last "jonathan ")
1601645015511:(first "jonathan ")
1601645067318:(not= (last "Jonathan ") \\space)
1601645078498:(not= (last "Jonathan") \\space)
1601645994448:(clojure.repl/source dedupe)
1601646382115:(def flag (atom true))
1601646387346:@flag
1601646401139:(reset! flag false)
1601646404524:@flag
1601647164645:(def duplicate-space? (atom false))
1601647174244:(reset! @duplicate-space? false)
1601647260596::repl/quit
1601647578615:(clojure.string/replace "Jonathan Edward  Huston   is here." #"  " " ")
1601647665909:(clojure.string/replace "Jonathan Edward  Huston   is here." #" +" " ")
1601648166758::repl/quit
1601808933902:(reduce clojure.string/join "" ["jonathan" "huston" "is" "here"])
1601808996128:(reduce clojure.string/join ["jonathan" "huston" "is" "here"])
1601809005842:(reduce + 0 [1 2 3])
1601809020791:(require '[clojure.string as str])
1601809036646:(require '[clojure.string :as str])
1601809052843:(str/join "jonathan" "huston")
1601809124471:(str/join "" ["jonathan" "huston"])
1601809164714:(reduce str "" ["Jonathan" "huston" "Is" "here"])
1601809788206::repl/quit
1602079500707:(require '[clojure.java.io :as io])
1602079514048:(.getPath (io/file "jonathan.docx"))
1602079531598:(.getPath (io/file "Users/jonathanhuston/jonathan.docx"))
1602079547653:(.getName (io/file "Users/jonathanhuston/jonathan.docx"))
1602079598088:(.getParent (io/file "Users/jonathanhuston/jonathan.docx"))
1602079659868:(.getName (io/file "Users/jonathanhuston/jonathan.docx"))
1602079719649:(defn ^String printer [x] (println x))
1602079723508:(printer "Jonathan")
1602079727057:(printer 5)
1602079761066:(subs "Jonathan.docx" 0 5)
1602079815176:(.lastIndexOf "Jonathan.docx" ".")
1602079822413:(subs "Jonathan.docx" 0 8)
1602079831852:(.lastIndexOf "Jonathan.doc.doc" ".")
1602079837446:(subs "Jonathan.docx" 0 12)
1602079936307:(.lastIndexOf "Jonathan.docx" "F")
1602081942374:(.getname (io/file "resources/doc1"))
1602081953746:(.getName (io/file "resources/doc1"))
1602081988385:(str (.getName (io/file "resources/doc1")) ".docx")
1602091092408:(def text "Jonathan (Edward) Huston")
1602091154633:(def text "Jonathan ((Edward) Huston")
1602091233838:(get text 3)
1602091253332:(some #{"("} text)
1602091262143:(some #{\\(} text)
1602091273571:(some #{\\x} text)
1602091278130:(some #{\\n} text)
1602091344724:(use '[clojure.contrib.seq :only (positions)])
1602091383716:(map-indexed vector text)
1602091472357:(filter #(= \\( (second %) *1)))
1602091486585:(filter #(= \\( (second %)) *1)
1602091513919:(map-indexed vector text)
1602091516025:(filter #(= \\( (second %) *1)))
1602091522615:(map-indexed vector text)
1602091529252:(filter #(= \\( (second %)) *1)
1602091548420:(def ind (map-indexed vector text))
1602091557070:(filter #(= \\( (second %)) ind)
1602091564884:(filter #(= \\) (second %)) ind)
1602091785252:(def open (filter #(= \\( (second %)) ind))
1602091796035:(def closed (filter #(= \\) (second %)) ind))
1602091798433:open
1602091799589:closed
1602091804445:(zip open closed)
1602091815973:(map first open)
1602091818966:(map first closed)
1602091830349:(def o (map first open))
1602091836350:(def c (map first closed)\n  )
1602091837597:o
1602091838139:c
1602091887883:(map vector o c)
1602091903088:o
1602091903508:c
1602092055379:(def text "Jonathan ((Edward) (Huston)")
1602092062089:(def ind (map-indexed vector text))
1602092068565:(def open (filter #(= \\( (second %)) ind))
1602092075797:(def closed (filter #(= \\) (second %)) ind))
1602092086518:(def o (map first open))
1602092094080:(def c (map first closed)\n  )
1602092096025:o
1602092096663:c
1602092969032:(difference o c)
1602092973762:(diff o c)
1602094714839:ind
1602094764682:o
1602094765934:c
1602095896710:(def text "Jonathan ((Edward) (Huston)")
1602096375696:(map-indexed "Jonathan")
1602096492806:o
1602096987575:(def open (filter #(= \\( (second %)) ind))
1602096992360:(def closed (filter #(= \\) (second %)) ind))
1602096997513:(def o (map first open))
1602097001739:(def c (map first closed)\n  )
1602097002874:o
1602097003499:c
1602097025321:text
1602097147634:(vector o c)
1602097186761:(interleave o c)
1602097209238:(partition 2 *1)
1602097238957:o
1602097239402:c
1602097243108:ind
1602097245934:text
1602097306299:(def text "Jo(nat)han ((Edward) (Huston)")
1602097311232:(def ind (map-indexed vector text))
1602097320069:(def open (filter #(= \\( (second %)) ind))
1602097324366:(def closed (filter #(= \\) (second %)) ind))
1602097328129:(def o (map first open))
1602097332223:(def c (map first closed)\n  )
1602097333745:o
1602097334367:c
1602097576284:o
1602097585731:(partition 2 o)
1602098141643:o
1602098176931:(take 2 o)
1602098186143:(map #(take 2) o)
1602098204671:(map #(take 2 %) o)
1602098267983:(map #(list (first %) (first (rest %))) o)
1602098284910:(map #(first %) o)
1602098344516:(list (first o) (second o))
1602098371245:(get o 1)
1602098376515:(get 1 o)
1602098383259:(get 2 o)
1602098386640:(get o 1)
1602098389521:o
1602098444400:(doc get)
1602098448281:(clojure.core/doc get)
1602098462575:(clojure.repl/doc get)
1602098601744:(get o 0)
1602098604199:o
1602098618035:(get o 1)
1602098621235:(get o 3)
1602098626787:(get [1 2 3] 1)
1602098651489:(nth o 2)
1602098677899:o
1602098689606:(range 3)
1602098694597:(range (count o))
1602098699794:o
1602098755804:(map #(list (nth o %) (nth o (inc %)) (range (count o))\n            )\n     )
1602098809418:(map #(list (nth o %) (nth o (inc %))) (range (count o)))
1602098833593:(map #(list (nth o %) (nth o (inc %))) (dec (range (count o))))
1602098853827:(map #(list (nth o %) (nth o (inc %))) (range dec (count o)))))
1602098856859:(map #(list (nth o %) (nth o (inc %))) (range dec (count o))))
1602098889960:(map #(list (nth o %) (nth o (inc %))) (range (dec (count o))))
1602098892637:o
1602098949724:(map #(list (nth o %) (nth o (inc %))) (range (dec (count o))))
1602099022162:(map #(list (nth o %) (nth o (inc %))) (r\n                                        ange (dec (count o))))
1602099024007:(map #(list (nth o %) (nth o (inc %))) (range (dec (count o))))
1602099034514:(def twins *1)
1602099036619:twins
1602099037162:c
1602099111746:(map #((nth o %) (nth o (inc %))) (range (dec (count o))))
1602099121101:(map #('(nth o %) (nth o (inc %))) (range (dec (count o))))
1602099133684:(map #('((nth o %) (nth o (inc %)))) (range (dec (count o))))
1602099156470:(map #(list (nth o %) (nth o (inc %))) (range (dec (count o))))
1602099270817:twins
1602099271990:b
1602099274886:c
1602099555496:(def text "Jo(nat)han ((Ed(ward) (Huston)(")
1602099562523:(def ind (map-indexed vector text))
1602099571177:(def open (filter #(= \\( (second %)) ind))
1602099575105:(def closed (filter #(= \\) (second %)) ind))
1602099579219:(def o (map first open))
1602099582959:(def c (map first closed)\n  )
1602099602093:o
1602099602968:c
1602099604324:o
1602099627917:(map #(list (nth o %) (nth o (inc %))) (range (dec (count o))))
1602099632892:(def twins *1)
1602099634096:twins
1602099636933:c
1602099641060:text
1602099642132:twins
1602099643679:o
1602099647335:text
1602099648401:twins
1602099648745:c
1602099895420:(keep-indexed #((< (first %2) (second %2))) twins)
1602099980370:(keep-indexed #(if (< (first %2) (second %2)) %1) twins)
1602099990708:(keep-indexed #(if (< (first %2) (second %2)) (inc %1)) twins)
1602100382826:text
1602100608188:twins
1602100610144:text
1602100611621:twins
1602100613411:c
1602100745757:(reduce #() '() twins)
1602103167969:tex
1602103172015:text
1602103219455:(def indexed (map-indexed vector text))
1602103222143:indexed
1602103264647:(filter #(some #{\\( \\)} (second %)) indexed)
1602103302370:#(some #{some #("a" "b") "a")
1602103317706:(some #{some #("a" "b") "a"))
1602103332822:(some #{"a" "b"} "a"))
1602103334746:(some #{"a" "b"} "a")
1602103820279:text
1602103886528:(map-indexed vector text)
1602104019203:(filter #(some #{\\( \\)} (second %)) *1)
1602104030660:(def indexed (map-indexed vector text))
1602104032887:indexed
1602104089676:(filter #(some #{%} '(\\( \\))) indexed)
1602104108800:(filter #(some #{(second %)} '(\\( \\))) indexed)
1602104175250:(def all-parens *1)
1602104181060:all-parens
1602104366596:(keep-indexed #(when (= (nth all-parens %1) (nth all-parents (inc %1)) %2) (range (dec (count all-parens)))))
1602104376485:(keep-indexed #(when (= (nth all-parens %1) (nth all-parens (inc %1)) %2) (range (dec (count all-parens)))))
1602104398595:(keep-indexed #(when (= (nth all-parens %2) (nth all-parens (inc %2)) %1) (range (dec (count all-parens)))))
1602104601159:all-parens
1602105095199:(map #(%) (-> all-parens count dec range))
1602105112630:(-> all-parens count dec range)
1602105141921:(map #(nth all-parens %) (-> all-parens count dec range))
1602105173714:(map #(nth all-parens (second %)) (-> all-parens count dec range))
1602105196489:(map #(nth all-parens %) (-> all-parens count dec range))
1602105203919:(second [1 2])
1602105224522:(map #(second (nth all-parens %)) (-> all-parens count dec range))
1602105277046:(map #(when (= (second (nth all-parens %) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range))
1602105317402:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range))))
1602105367693:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range)))
1602105371459:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range))
1602105382348:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range)))
1602105395020:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range)))))
1602105399297:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range))
1602105408847:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %))))) %) (-> all-parens count dec range)))
1602105475929:(map #(when (= (second (nth all-parens %)) (second (nth all-parens (inc %)))) %) (-> all-parens count dec range))
1602105505505:all-parens
1602105519307:text
1602105622024:(def open (atom 0))
1602105624669:@open
1602105632539:(def closed (atom 0))
1602105702178:(all-parens)
1602105706824:all-parens
1602107110136:(conj [] 5)
1602107118110:(conj [5] 6)
1602107128965:(conj '(5) 6)
1602107602023:text
1602107661332:(filter #(some #{%} [\\( \\)]))
1602107670921:(filter #(some #{%} [\\( \\)]) text)
1602107870458:(def x *1)
1602107873332:(first x)
1602107875271:(second x)
1602107932369:(first [1 2])
1602107936108:(second [1 2])
1602107944415:(rest [1 2])
1602108398037:(conj [] 1)
1602112497967::repl/quit
